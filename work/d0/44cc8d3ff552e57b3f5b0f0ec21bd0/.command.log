> 
> #Libraries
> library(Seurat)
Attaching SeuratObject
Attaching sp
> library(argparser, quietly=TRUE)
> library(ggplot2)
> 
> # Create a parser
> p <- arg_parser("Parameters for Seurat object")
> 
> #Parameters - section 1
> #Import files
> 
> p <- add_argument(p, "--fileUmi",help="Path to file UMI count matrix")
> p <- add_argument(p, "--fileHto",help="Path to file HTO matrix")
> 
> #Parameters - section 2
> p <- add_argument(p, "--selectMethod",help="Selection method", default="vst")
> p <- add_argument(p, "--numberFeatures",help="Number of features to be used when finding variable features", type="numeric", default=2000)
> p <- add_argument(p, "--assay",help="Choose assay between RNA or HTO",default="HTO")
> 
> #Parameters - section 3
> p <- add_argument(p, "--normalisationMethod",help="Normalisation method", default="CLR")
> p <- add_argument(p, "--margin",help="Margin for normalisation", type="numeric",default=2)
> p <- add_argument(p, "--assayName",help="Name of the Hashtag assay HTO by default",default="HTO")
> 
> #Output paths
> p <- add_argument(p, "--demulOutPath",help="Path to file where the rds object ready for demultiplexing will be saved", default = NULL)
> p <- add_argument(p, "--nameOutputFile",help="Name for the file containing the output of HTODemux hashtag", default = "result")
> 
> argv <- parse_args(p)
> 
> #---------------- Section 1 - Input files -----------------
> pbmc.umis <-readRDS(argv$fileUmi)
> pbmc.htos <- readRDS(argv$fileHto)
> 
> 
> #Identify which UMI corresponds to which hashtag.
> joint.bcs <- intersect(colnames(pbmc.umis), colnames(pbmc.htos))
> 
> # Subset RNA and HTO counts by joint cell barcodes
> pbmc.umis <- pbmc.umis[, joint.bcs]
> pbmc.htos <- as.matrix(pbmc.htos[, joint.bcs])
> 
> # Confirm that the HTO have the correct names
> rownames(pbmc.htos)
[1] "HTO_A" "HTO_B" "HTO_C" "HTO_D" "HTO_E" "HTO_F" "HTO_G" "HTO_H"
> 
> #-------------------- Section 2 - Setup Seurat ---------------------------------------
> 
> #Setup Seurat object and add in the HTO data
> # Setup Seurat object
> pbmc.hashtag <- CreateSeuratObject(counts = pbmc.umis)
Warnung: Feature names cannot have underscores ('_'), replacing with dashes ('-')
> 
> str(pbmc.hashtag)
Formal class 'Seurat' [package "SeuratObject"] with 13 slots
  ..@ assays      :List of 1
  .. ..$ RNA:Formal class 'Assay' [package "SeuratObject"] with 8 slots
  .. .. .. ..@ counts       :Formal class 'dgCMatrix' [package "Matrix"] with 6 slots
  .. .. .. .. .. ..@ i       : int [1:6155342] 1338 1450 1611 1870 1954 2247 2299 2363 2374 2396 ...
  .. .. .. .. .. ..@ p       : int [1:16917] 0 210 384 652 993 1254 1459 1615 1867 2097 ...
  .. .. .. .. .. ..@ Dim     : int [1:2] 27117 16916
  .. .. .. .. .. ..@ Dimnames:List of 2
  .. .. .. .. .. .. ..$ : chr [1:27117] "A1BG" "A1BG-AS1" "A1CF" "A2M" ...
  .. .. .. .. .. .. ..$ : chr [1:16916] "AGGCCACAGCGTCTAT" "ATTGGTGAGTTCGCAT" "GTGCAGCTCAGTCCCT" "TAGTTGGGTCATACTG" ...
  .. .. .. .. .. ..@ x       : num [1:6155342] 2 1 4 1 1 1 1 1 1 1 ...
  .. .. .. .. .. ..@ factors : list()
  .. .. .. ..@ data         :Formal class 'dgCMatrix' [package "Matrix"] with 6 slots
  .. .. .. .. .. ..@ i       : int [1:6155342] 1338 1450 1611 1870 1954 2247 2299 2363 2374 2396 ...
  .. .. .. .. .. ..@ p       : int [1:16917] 0 210 384 652 993 1254 1459 1615 1867 2097 ...
  .. .. .. .. .. ..@ Dim     : int [1:2] 27117 16916
  .. .. .. .. .. ..@ Dimnames:List of 2
  .. .. .. .. .. .. ..$ : chr [1:27117] "A1BG" "A1BG-AS1" "A1CF" "A2M" ...
  .. .. .. .. .. .. ..$ : chr [1:16916] "AGGCCACAGCGTCTAT" "ATTGGTGAGTTCGCAT" "GTGCAGCTCAGTCCCT" "TAGTTGGGTCATACTG" ...
  .. .. .. .. .. ..@ x       : num [1:6155342] 2 1 4 1 1 1 1 1 1 1 ...
  .. .. .. .. .. ..@ factors : list()
  .. .. .. ..@ scale.data   : num[0 , 0 ] 
  .. .. .. ..@ key          : chr "rna_"
  .. .. .. ..@ assay.orig   : NULL
  .. .. .. ..@ var.features : logi(0) 
  .. .. .. ..@ meta.features:'data.frame':	27117 obs. of  0 variables
  .. .. .. ..@ misc         : list()
  ..@ meta.data   :'data.frame':	16916 obs. of  3 variables:
  .. ..$ orig.ident  : Factor w/ 1 level "SeuratProject": 1 1 1 1 1 1 1 1 1 1 ...
  .. ..$ nCount_RNA  : num [1:16916] 273 305 445 691 349 ...
  .. ..$ nFeature_RNA: int [1:16916] 210 174 268 341 261 205 156 252 230 200 ...
  ..@ active.assay: chr "RNA"
  ..@ active.ident: Factor w/ 1 level "SeuratProject": 1 1 1 1 1 1 1 1 1 1 ...
  .. ..- attr(*, "names")= chr [1:16916] "AGGCCACAGCGTCTAT" "ATTGGTGAGTTCGCAT" "GTGCAGCTCAGTCCCT" "TAGTTGGGTCATACTG" ...
  ..@ graphs      : list()
  ..@ neighbors   : list()
  ..@ reductions  : list()
  ..@ images      : list()
  ..@ project.name: chr "SeuratProject"
  ..@ misc        : list()
  ..@ version     :Classes 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 1 0
  ..@ commands    : list()
  ..@ tools       : list()
> 
> 
> #------------------ Section 3 - adding HTO data as an independent assay ---------------------
> # Add HTO data as a new assay independent from RNA
> pbmc.hashtag[[argv$assayName]] <- CreateAssayObject(counts = pbmc.htos)
Warnung: Feature names cannot have underscores ('_'), replacing with dashes ('-')
> # Normalize HTO data
> pbmc.hashtag <- NormalizeData(pbmc.hashtag, assay = argv$assayName, normalization.method = argv$normalisationMethod, margin=argv$margin)
Normalizing across cells
> 
> str(pbmc.hashtag)
Formal class 'Seurat' [package "SeuratObject"] with 13 slots
  ..@ assays      :List of 2
  .. ..$ RNA:Formal class 'Assay' [package "SeuratObject"] with 8 slots
  .. .. .. ..@ counts       :Formal class 'dgCMatrix' [package "Matrix"] with 6 slots
  .. .. .. .. .. ..@ i       : int [1:6155342] 1338 1450 1611 1870 1954 2247 2299 2363 2374 2396 ...
  .. .. .. .. .. ..@ p       : int [1:16917] 0 210 384 652 993 1254 1459 1615 1867 2097 ...
  .. .. .. .. .. ..@ Dim     : int [1:2] 27117 16916
  .. .. .. .. .. ..@ Dimnames:List of 2
  .. .. .. .. .. .. ..$ : chr [1:27117] "A1BG" "A1BG-AS1" "A1CF" "A2M" ...
  .. .. .. .. .. .. ..$ : chr [1:16916] "AGGCCACAGCGTCTAT" "ATTGGTGAGTTCGCAT" "GTGCAGCTCAGTCCCT" "TAGTTGGGTCATACTG" ...
  .. .. .. .. .. ..@ x       : num [1:6155342] 2 1 4 1 1 1 1 1 1 1 ...
  .. .. .. .. .. ..@ factors : list()
  .. .. .. ..@ data         :Formal class 'dgCMatrix' [package "Matrix"] with 6 slots
  .. .. .. .. .. ..@ i       : int [1:6155342] 1338 1450 1611 1870 1954 2247 2299 2363 2374 2396 ...
  .. .. .. .. .. ..@ p       : int [1:16917] 0 210 384 652 993 1254 1459 1615 1867 2097 ...
  .. .. .. .. .. ..@ Dim     : int [1:2] 27117 16916
  .. .. .. .. .. ..@ Dimnames:List of 2
  .. .. .. .. .. .. ..$ : chr [1:27117] "A1BG" "A1BG-AS1" "A1CF" "A2M" ...
  .. .. .. .. .. .. ..$ : chr [1:16916] "AGGCCACAGCGTCTAT" "ATTGGTGAGTTCGCAT" "GTGCAGCTCAGTCCCT" "TAGTTGGGTCATACTG" ...
  .. .. .. .. .. ..@ x       : num [1:6155342] 2 1 4 1 1 1 1 1 1 1 ...
  .. .. .. .. .. ..@ factors : list()
  .. .. .. ..@ scale.data   : num[0 , 0 ] 
  .. .. .. ..@ key          : chr "rna_"
  .. .. .. ..@ assay.orig   : NULL
  .. .. .. ..@ var.features : logi(0) 
  .. .. .. ..@ meta.features:'data.frame':	27117 obs. of  0 variables
  .. .. .. ..@ misc         : list()
  .. ..$ HTO:Formal class 'Assay' [package "SeuratObject"] with 8 slots
  .. .. .. ..@ counts       :Formal class 'dgCMatrix' [package "Matrix"] with 6 slots
  .. .. .. .. .. ..@ i       : int [1:131137] 0 2 3 4 5 6 7 0 1 2 ...
  .. .. .. .. .. ..@ p       : int [1:16917] 0 7 15 22 30 38 46 54 61 69 ...
  .. .. .. .. .. ..@ Dim     : int [1:2] 8 16916
  .. .. .. .. .. ..@ Dimnames:List of 2
  .. .. .. .. .. .. ..$ : chr [1:8] "HTO-A" "HTO-B" "HTO-C" "HTO-D" ...
  .. .. .. .. .. .. ..$ : chr [1:16916] "AGGCCACAGCGTCTAT" "ATTGGTGAGTTCGCAT" "GTGCAGCTCAGTCCCT" "TAGTTGGGTCATACTG" ...
  .. .. .. .. .. ..@ x       : num [1:131137] 3 1 10 10 12 ...
  .. .. .. .. .. ..@ factors : list()
  .. .. .. ..@ data         : num [1:8, 1:16916] 0.2183 0 0.0782 0.5951 0.5951 ...
  .. .. .. .. ..- attr(*, "dimnames")=List of 2
  .. .. .. .. .. ..$ : chr [1:8] "HTO-A" "HTO-B" "HTO-C" "HTO-D" ...
  .. .. .. .. .. ..$ : chr [1:16916] "AGGCCACAGCGTCTAT" "ATTGGTGAGTTCGCAT" "GTGCAGCTCAGTCCCT" "TAGTTGGGTCATACTG" ...
  .. .. .. ..@ scale.data   : num[0 , 0 ] 
  .. .. .. ..@ key          : chr "hto_"
  .. .. .. ..@ assay.orig   : NULL
  .. .. .. ..@ var.features : logi(0) 
  .. .. .. ..@ meta.features:'data.frame':	8 obs. of  0 variables
  .. .. .. ..@ misc         : list()
  ..@ meta.data   :'data.frame':	16916 obs. of  5 variables:
  .. ..$ orig.ident  : Factor w/ 1 level "SeuratProject": 1 1 1 1 1 1 1 1 1 1 ...
  .. ..$ nCount_RNA  : num [1:16916] 273 305 445 691 349 ...
  .. ..$ nFeature_RNA: int [1:16916] 210 174 268 341 261 205 156 252 230 200 ...
  .. ..$ nCount_HTO  : num [1:16916] 4200 3475 1211 955 1912 ...
  .. ..$ nFeature_HTO: int [1:16916] 7 8 7 8 8 8 8 7 8 8 ...
  ..@ active.assay: chr "RNA"
  ..@ active.ident: Factor w/ 1 level "SeuratProject": 1 1 1 1 1 1 1 1 1 1 ...
  .. ..- attr(*, "names")= chr [1:16916] "AGGCCACAGCGTCTAT" "ATTGGTGAGTTCGCAT" "GTGCAGCTCAGTCCCT" "TAGTTGGGTCATACTG" ...
  ..@ graphs      : list()
  ..@ neighbors   : list()
  ..@ reductions  : list()
  ..@ images      : list()
  ..@ project.name: chr "SeuratProject"
  ..@ misc        : list()
  ..@ version     :Classes 'package_version', 'numeric_version'  hidden list of 1
  .. ..$ : int [1:3] 4 1 0
  ..@ commands    :List of 1
  .. ..$ NormalizeData.HTO:Formal class 'SeuratCommand' [package "SeuratObject"] with 5 slots
  .. .. .. ..@ name       : chr "NormalizeData.HTO"
  .. .. .. ..@ time.stamp : POSIXct[1:1], format: "2022-05-27 13:54:42"
  .. .. .. ..@ assay.used : chr "HTO"
  .. .. .. ..@ call.string: chr [1:2] "NormalizeData(pbmc.hashtag, assay = argv$assayName, normalization.method = argv$normalisationMethod, " "    margin = argv$margin)"
  .. .. .. ..@ params     :List of 5
  .. .. .. .. ..$ assay               : chr "HTO"
  .. .. .. .. ..$ normalization.method: chr "CLR"
  .. .. .. .. ..$ scale.factor        : num 10000
  .. .. .. .. ..$ margin              : num 2
  .. .. .. .. ..$ verbose             : logi TRUE
  ..@ tools       : list()
> 
> #------------------Section 5 - Save object for demultiplex ---------------------------"
> 
> create_files <- function(name, path,extension) {
+   path_complete <- paste(path, name,extension,sep="")
+   print(path_complete)
+   if (file.exists(path_complete)) {
+     print("The file already exists...")
+     return(-1)
+   } else {
+     print("Created new file with results")
+     file.create(path_complete)
+     return(path_complete)
+   }
+ }
> 
> 
> #Save Results
> print(argv$nameOutputFile)
[1] "result"
> pbmc_file = paste(argv$demulOutPath,argv$nameOutputFile,".rds",sep="")
> print(pbmc_file)
[1] "/Users/mylenemarianagonzalesandre/Development/Bachelor-Thesis/demultiplex-pipeline/resultsresult.rds"
> saveRDS(pbmc.hashtag, file=pbmc_file)
> 
> 
